package tetris;

import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.JPanel;

public class Board extends JPanel{

	private BufferedImage blocks;
	private final int blockSize = 30;
	private final int boardWidth = 10, boardHeight = 20;
	private int[][] board = new int[boardWidth][boardHeight];
	
	private Shape[] shapes = new Shape[7];
	
	public Board() {
		try {
			blocks = ImageIO.read(Board.class.getResource("/blocks.png"));
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		shapes[0] = new Shape(blocks.getSubimage(0, 0, blockSize, blockSize), new int[][] {{1,1,1,1}}, this);
		shapes[1] = new Shape(blocks.getSubimage(0, 0, blockSize, blockSize), new int[][] {{1,1,0}, {0,1,1}}, this);
		shapes[2] = new Shape(blocks.getSubimage(0, 0, blockSize, blockSize), new int[][] {{0,1,1}, {1,1,0}}, this);
		
		shapes[3] = new Shape(blocks.getSubimage(0, 0, blockSize, blockSize), new int[][] {{1,1,1}, {0,0,1}}, this);
		shapes[4] = new Shape(blocks.getSubimage(0, 0, blockSize, blockSize), new int[][] {{0,1,1}, {1,1,0}}, this);
		shapes[5] = new Shape(blocks.getSubimage(0, 0, blockSize, blockSize), new int[][] {{0,1,1}, {1,1,0}}, this);
		shapes[6] = new Shape(blocks.getSubimage(0, 0, blockSize, blockSize), new int[][] {{0,1,1}, {1,1,0}}, this);
	}
	
	public void paintComponent(Graphics gr) {
		super.paintComponent(gr);
		for(int i = 0; i < boardHeight; i++) {
			gr.drawLine(0, i * blockSize, boardWidth * blockSize, i * blockSize);
		}
		for(int j = 0; j < boardWidth; j++) {
			gr.drawLine(j * blockSize, 0, j * blockSize, boardHeight * blockSize);
		}
	}
}
